/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.form;

import com.controller.ControllerCaixa;
import com.controller.ControllerConfiguracoes;
import com.controller.ControllerUsuario;
import com.form.menu.EventMenu;
import com.model.ModelCaixa;
import com.model.ModelConfiguracao;
import com.model.ModelUser;
import com.utils.Report;
import com.view.Login;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import load.Loading;
import message.MessageChooser;
import message.MessageDialog;
import net.miginfocom.swing.MigLayout;

/**
 *
 * @author CLÁUDIO RICAI
 */
public class Main extends javax.swing.JFrame {

    Main frame;
    private final ModelUser user;
    private ModelCaixa caixa;
    private int gIndex;
    private int iIndex;

    public static class MenuIndex {

        public static final int USUARIO = 1;
        public static final int MAIN = 0;
        public static final int RELATORIO = 3;
        public static final int PROCURAR = 2;
        public static final int CONFIGS = 4;
        public static final int SERVICO = 5;
        public static final int PERFIL = 6;
        public static final int SAIR = 7;
    }

    /**
     * Creates new form Main
     */
    public Main(ModelUser user) {
        initComponents();
        frame = this;
        ModelConfiguracao configs = getConfigs();
        this.setSize(new Dimension(937, 634));
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        init(user, configs);
        this.user = user;
        gIndex = -1;
        iIndex = -1;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        menu1 = new com.form.menu.Menu();
        jPanel2 = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        desktop = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.BorderLayout());

        menu1.setBackground(new java.awt.Color(255, 255, 255));
        menu1.setPreferredSize(new java.awt.Dimension(100, 100));
        jPanel1.add(menu1, java.awt.BorderLayout.LINE_START);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new java.awt.BorderLayout());

        title.setFont(new java.awt.Font("Roboto Black", 0, 18)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel2.add(title, java.awt.BorderLayout.PAGE_START);

        desktop.setBackground(new java.awt.Color(255, 255, 255));
        desktop.setLayout(new java.awt.BorderLayout());
        jPanel2.add(desktop, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void init(ModelUser user, ModelConfiguracao config) {
        menu1.addItem(".//src//com//icons//menu1.png", 0, "Tela Inicial");
        menu1.addItem(".//src//com//icons//menu2.png", 1, "Cadastrar novo usuÃ¡rio");
        menu1.addItem(".//src//com//icons//menu3.png", 2, "Procurar usuÃ¡rios");
        menu1.addItem(".//src//com//icons//menu4.png", 3, "RelatÃ³rios");
        menu1.addItem(".//src//com//icons//menu5.png", 4, "ConfiguraÃ§Ãµes");
        menu1.addItem(".//src//com//icons//menu6.png", 5, "Atendimento");
        menu1.addItem(".//src//com//icons//user.png", 6, "Seu perfil");

        menu1.addItem(".//src//com//icons//menu7.png", 7, "Sair");
        menu1.setLayout(new MigLayout("fill", "[fill]", "[fill]"));

        menu1.addEvent(new EventMenu() {
            @Override
            public void menuSelected(int index) {

                if (index != MenuIndex.PERFIL) {

                    iIndex = index;
                }

                if (index != MenuIndex.SAIR && index != MenuIndex.RELATORIO) {

                    if (user.getTipo() != 0) {
                        if ((index == MenuIndex.MAIN || index == MenuIndex.PERFIL || index == MenuIndex.SERVICO)) {

                            if (index == gIndex) {
                                return;
                            } else {
                                gIndex = index;
                            }

                        }
                    } else {

                        if (gIndex == index) {
                            return;
                        } else {
                            gIndex = index;
                        }
                    }
                }

                setCursor(new Cursor(Cursor.WAIT_CURSOR) {
                });
                switch (index) {

                    case MenuIndex.PROCURAR -> {
                        if (user.getTipo() != 0) {
                            MessageDialog message = new MessageDialog(frame, MessageDialog.Type.INFO);
                            message.showMessage("Aviso!", "Apenas administradores podem acessar esta Ã¡rea");
                            setCursor(Cursor.DEFAULT_CURSOR);
                            return;
                        }
                        showForm(new PanelProcurar(frame));

                        frame.setFormTitle("Procurar usuÃ¡rios");
                        frame.getTitlePane().setPreferredSize(new Dimension(0, 70));
                    }

                    case MenuIndex.PERFIL -> {
                        showProfile();
                        frame.getTitlePane().setPreferredSize(new Dimension(0, 20));
                        frame.setFormTitle("");
                    }

                    case MenuIndex.MAIN -> {
                        ModelConfiguracao configs = getConfigs();
                        if (configs != null) {
                            showForm(new PanelMain(new ImageIcon(config.getLogo()), configs.getNome()));
                        } else {
                            showForm(new PanelMain(new ImageIcon(".//src//com//icons//icon.png"), "Cannonical Tree"));
                        }

                        frame.getTitlePane().setPreferredSize(new Dimension(0, 20));
                        frame.setFormTitle("");
                    }

                    case MenuIndex.CONFIGS -> {
                        if (user.getTipo() != 0) {
                            MessageDialog message = new MessageDialog(frame, MessageDialog.Type.INFO);
                            message.showMessage("Aviso!", "Apenas administradores podem acessar esta Ã¡rea");
                            setCursor(Cursor.DEFAULT_CURSOR);
                            return;
                        }
                        showForm(new PanelConfiguration(frame));
                        frame.setFormTitle("");
                        frame.getTitlePane().setPreferredSize(new Dimension(0, 10));
                    }
                    case MenuIndex.USUARIO -> {
                        if (user.getTipo() != 0) {
                            MessageDialog message = new MessageDialog(frame, MessageDialog.Type.INFO);
                            message.showMessage("Aviso!", "Apenas administradores podem acessar esta Ã¡rea");
                            setCursor(Cursor.DEFAULT_CURSOR);
                            return;
                        }
                        showForm(new PanelUsuario(frame, null, 0));
                        frame.setFormTitle("");

                        frame.getTitlePane().setPreferredSize(new Dimension(0, 20));
                    }
                    case MenuIndex.RELATORIO ->
                        imprimirRelatorio(user.getTipo());
                    case MenuIndex.SERVICO -> {
                        if (caixa == null) {
                            showForm(new PanelAtendimento(frame));
                        } else {
                            showForm(new PanelAtendimento(frame, caixa));
                        }
                        frame.setFormTitle("Atendimento");
                        frame.getTitlePane().setPreferredSize(new Dimension(0, 70));
                    }
                    case MenuIndex.SAIR ->
                        close();
                    default -> {
                    }
                }
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR) {
                });
            }
        });

        frame.getTitlePane().setPreferredSize(new Dimension(0, 20));
        if (config != null) {
            showForm(new PanelMain(new ImageIcon(config.getLogo()), config.getNome()));
        } else {
            showForm(new PanelMain(new ImageIcon(".//src//com//icons//icon.png"), "Cannonical Tree"));
        }
    }

    private void imprimirRelatorio(int tipo) {

        if (tipo == 0) {

            MessageDialog dialog = new MessageDialog(frame, MessageDialog.Type.QUESTION);
            dialog.showMessage("Continuar", "Deseja imprimir um relatÃ³rio?");
            if (dialog.getMessageType() == MessageDialog.MessageType.OK) {
                MessageChooser chooser = new MessageChooser(frame, MessageChooser.Type.CHOOSE, "");
                chooser.addItem("RelatÃ³rio de atendimentos feitos por um funcionÃ¡rio");
                chooser.addItem("RelatÃ³rio de atendimentos de todos os funcionÃ¡rios");
                chooser.addItem("RelatÃ³rio de atendimentos nÃ£o concluidos");

                chooser.showMessage("RelatÃ³rios", "Escolha o tipo de relatÃ³rio que deseja imprimir");
                if (chooser.getItemChoosen().equals("RelatÃ³rio de atendimentos feitos por um funcionÃ¡rio")) {

                    Loading load = new Loading(frame, true);
                    new Thread(new Runnable() {
                        @Override
                        public void run() {
                            ArrayList<ModelUser> users = new ControllerUsuario().getAllUser(frame);

                            if (users.size() > 0) {

                                MessageChooser c = new MessageChooser(frame, MessageChooser.Type.CHOOSE, "Nome do funcionÃ¡rio - NÂº do bilhete");
                                for (ModelUser us : users) {

                                    c.addItem(us.getName() + " - " + us.getBi());
                                }
                                c.showMessage("", "Escolha o funcionÃ¡rio");

                                String i[] = c.getItemChoosen().split("-");
                                String itemChoosen[] = i[1].split(" ");
                                load.transferFocus();
                                new Report().imprimirRelatorio(frame, itemChoosen[1], user.getName());
                                load.dispose();

                            } else {
                                MessageDialog dialog = new MessageDialog(frame, MessageDialog.Type.INFO);
                                dialog.showMessage("Aviso", "NÃ£o foi encontrado nenhum funcionÃ¡rio");
                                load.dispose();
                            }

                        }
                    }).start();
                    load.setVisible(true);

                } else if (chooser.getItemChoosen().equals("RelatÃ³rio de atendimentos de todos os funcionÃ¡rios")) {
                    Loading load = new Loading(frame, true);
                    new Thread(new Runnable() {
                        @Override
                        public void run() {

                            load.transferFocus();
                            new Report().imprimirRelatorio(frame, user.getName(), true);
                            load.dispose();

                        }
                    }).start();
                    load.setVisible(true);
                } else {
                    Loading load = new Loading(frame, true);
                    new Thread(new Runnable() {
                        @Override
                        public void run() {

                            load.transferFocus();
                            new Report().imprimirRelatorio(frame, user.getName(), false);
                            load.dispose();

                        }
                    }).start();
                    load.setVisible(true);
                }

            }
        } else {
            MessageDialog dialog = new MessageDialog(frame, MessageDialog.Type.INFO);
            dialog.showMessage("Aviso", "Apenas administradores podem acessar esta Ã¡rea");
        }
    }

    public JLabel getTitlePane() {
        return this.title;
    }

    public void setFormTitle(String title) {
        this.title.setText(title);
    }

    private ModelConfiguracao getConfigs() {
        ModelConfiguracao config = new ControllerConfiguracoes().getConfig(frame);
        return config;
    }

    public void setCaixa(ModelCaixa caixa) {
        this.caixa = caixa;
    }

    public boolean verificarSenhaDoUsuario(String usuario, String senha) {
        return usuario.equals(user.getUser()) && senha.equals(user.getPassword());
    }

    public void showForm(Component com) {
        load.Loading load = new Loading(frame, true);
        new Thread(new Runnable() {
            @Override
            public void run() {
                desktop.removeAll();
                desktop.add(com, BorderLayout.CENTER);
                desktop.repaint();
                desktop.revalidate();
                load.dispose();
            }
        }).start();
        load.setVisible(true);

    }

    private void close() {
        MessageDialog ms = new MessageDialog(this, MessageDialog.Type.QUESTION);
        ms.showMessage("Aviso", "Deseja sair? Se abriu um caixa ele serÃ¡ fechado automaticamente");
        if (ms.getMessageType() == MessageDialog.MessageType.OK) {
            if (caixa != null && caixa.getId() != 0) {
                int update = new ControllerCaixa().abrirFecharCaixa(frame, 0, caixa.getId());
                if (update < 1) {
                    return;
                }
            }
            Login login = new Login();
            login.setVisible(true);
            this.dispose();
        }
    }

    public void showProfile() {
        MessageDialog message = new MessageDialog(frame, MessageDialog.Type.QUESTION);
        message.showMessage("Aviso!", "Deseja ver e/ou editar os seus dados?");
        if (message.getMessageType() == MessageDialog.MessageType.OK) {
            showForm(new PanelUsuario(frame, user, user.getTipo()));
        } else {
            gIndex = iIndex;
        }
    }

    public int getUserId() {
        return user.getId();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel desktop;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private com.form.menu.Menu menu1;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
